"""
Lab1starter_ OCSbent.py

This code uses Psi4 to calculate the energy and optimized bond lengths
of an OCS molecule constrained to have a bend angle of 120 deg.

This is a starter code for Lab1.

In this example, a Z-matrix is cut/paste into the code. To see an
example of loading the Z-matrix from a file, check out Lab2starter_OCS.py

Origin CHE 525, S21 Problem Development
Author: Tom Allison
"""

#%%
# Import modules =======================================================
import psi4
import numpy as np  
import matplotlib.pyplot as plt
import pandas as pd

#%%
# Set up Psi4 ==========================================================

psi4.core.clean()          # Reset Psi4 to default startup settings in case anything lingers.
psi4.core.clean_options()
psi4.set_memory('4000 MB') # Can make this much larger on Seawulf, each compute node has more than 100 GB RAM
psi4.set_num_threads(4)    # Can make this much larger on Seawulf, each compute node can support 28 threads.
                           # But it doesn't help much for small molecules...
psi4.core.set_output_file('Lab1starter_OCSbent.dat', False) #this command sets psi4's output to a file. Comment this line out if you want to see the output on the terminal.

#%%
# Do Calculation =======================================================

# example of loading geometry from Z-matrix cut/paste
# The psi4.geometry below creates a new molecule object representing an
# OCS molecule with a 120 degree bend angle. 
OCS_120 = psi4.geometry("""
 o
 c    1 co2     
 s    2 sc3         1 sco3      
 
co2=        1.380000
sc3=        1.780000
sco3=       120.000
""")

OCS_120.reset_point_group('c1') # turn symmetry off!

method1 = 'scf/3-21G'  # store methods as string variables for later repeated use.
method2 = 'scf/6-311G*'

E0_120_1 = psi4.energy(method1, molecule = OCS_120) # calculate energy using method1
E0_120_2 = psi4.energy(method2, molecule = OCS_120) # calcualte energy using method2

# Optimize with constrained bend angle.
psi4.set_module_options('optking',{'frozen_bend': '1 2 3'}) # This command fixes the bend angle of the OCS molecule.
Eopt_120, wfn_opt120 = psi4.optimize(method2, molecule = OCS_120, return_wfn = True) # optimize geometry of molecule with previously defined constraint, return wave function to make .molden file.
psi4.driver.molden(wfn_opt120, 'OCS_120.molden') #write constrained optimzation results to a .molden file.

# Now turn optimization constraint off and reoptimize to find the global energy minimum
psi4.core.clean_options() # turn off frozen bend and any other options
Eopt, wfn_opt = psi4.optimize(method2, molecule = OCS_120, return_wfn = True)

#%%
# Print results to screen =======================================================
    
print('Energies at initial positions with different methods:')
print()
print('Energy at initial geometry with ' + method1 + ' is ' + str(E0_120_1) + ' Hatrees')
print('Energy at initial geometry with ' + method2 + ' is ' + str(E0_120_2) + ' Hatrees')
print()
print('Energy after constrained optimization with ' + method2 + ' is ' + str(Eopt_120) + ' Hatrees')
print('Energy after global optimization with ' + method2 + ' is ' + str(Eopt) + ' Hatrees')

#%%
# Save data to a spreadsheet using Pandas ==========================================
#
#  d = {'Details': [method1, method2, 'Constrained opt.', 'Global opt.'], 'Energies': [E0_120_1, E0_120_2, Eopt_120, Eopt]}
#  df = pd.DataFrame(data = d)
#  df.to_csv('Lab1starter_OCSbent_results.csv')  # save dataframe to .csv spreadsheet file.
 
# Or of course you can also extract the results from the raw .dat file
# generated by Psi4.

