"""
Lab1starter_ OCS.py

This code uses Psi4 to calculate the energy and optimized bond lengths
of an OCS molecule.

This is a starter code for Lab1.

In this example, a Z-matrix is loaded from an XYZ file. To see an example
where the Z-matrix is defined in the Python script, check out 
Lab1starter_OCSbent.py

Origin CHE 525, S21 Problem Development
Author: Tom Allison
"""

#%%
# Import modules =======================================================
import psi4
import numpy as np  
import matplotlib.pyplot as plt
import pandas as pd

#%%
# Set up Psi4 ==========================================================

psi4.core.clean()          # Reset Psi4 to default startup settings in case anything lingers.
psi4.core.clean_options()
psi4.set_memory('4000 MB') # Can make this much larger on Seawulf, each compute node has more than 100 GB RAM
psi4.set_num_threads(4)    # Can make this much larger on Seawulf, each compute node can support 28 threads.
                           # But it doesn't help much for small molecules...
psi4.core.set_output_file('Lab1starter_OCS.dat', False) #this command sets psi4's output to a file. Comment this line out if you want to see the output on the terminal.

#%%
# Do Calculation =======================================================

# Example of loading mile from .xyz file
# The psi4.geometry below creates a new molecule object representing 
# linear molecule with geometry defined by the .xyz file contents. 
f = open('OCS_linear.xyz')
OCS = psi4.geometry(f.read())
OCS.reset_point_group('c1') # turn symmetry off!

method1 = 'scf/3-21G'  # store methods as string variables for later repeated use.
method2 = 'scf/6-311G*'

E0_1 = psi4.energy(method1, molecule = OCS)  # calculate energy using method1
E0_2 = psi4.energy(method2, molecule = OCS)  # calculate energy using method2

Eopt, wfn_opt = psi4.optimize(method2, molecule = OCS, return_wfn = True)
psi4.driver.molden(wfn_opt, 'OCS.molden') #write optimzation results to a .molden file.

#%%
# Print results to screen =======================================================
    
print('Energies at initial positions with different methods:')
print()
print('Energy at initial geometry with ' + method1 + ' is ' + str(E0_1) + ' Hatrees')
print('Energy at initial geometry with ' + method2 + ' is ' + str(E0_2) + ' Hatrees')
print()
print('Energy after global optimization with ' + method2 + ' is ' + str(Eopt) + ' Hatrees')

#%%
# Save data to a spreadsheet using Pandas ==========================================
#
#  d = {'Details': [method1, method2, 'Global opt.'], 'Energies': [E0_1, E0_2, Eopt]} # create dictionary to load into Pandas dataframe.
#  df = pd.DataFrame(data = d)     # create Pandas dataframe
#  df.to_csv('Lab1starter_OCS_results.csv')  # save dataframe to .csv spreadsheet file.
 
# Or of course you can also extract the results from the raw .dat file
# generated by Psi4.

